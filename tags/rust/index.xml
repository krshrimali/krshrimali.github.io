<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust on Kushashwa Ravi Shrimali (Kush)</title><link>https://krshrimali.github.io/tags/rust/</link><description>Recent content in Rust on Kushashwa Ravi Shrimali (Kush)</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 23 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://krshrimali.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Progress Update: Context Pilot (Revamping)</title><link>https://krshrimali.github.io/posts/2025/03/progress-update-context-pilot-revamping/</link><pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2025/03/progress-update-context-pilot-revamping/</guid><description>&lt;p>I&amp;rsquo;ve had many iterations on this project that I&amp;rsquo;m going to talk about today, over the last 1.5-2 years. There are good and bad things about it. Good is that I&amp;rsquo;m persisting with completing it one day, bad is that I&amp;rsquo;ve not done it yet.&lt;/p>
&lt;p>In this blog, I&amp;rsquo;ll quickly touch upon why it has taken so much time and what&amp;rsquo;s happening behind the scenes.&lt;/p>
&lt;h2 id="about-the-project">About the project:&lt;/h2>
&lt;p>For a piece of code, this project is going to help you with questions like:&lt;/p></description></item><item><title>Building a ChatBot from your Documentation Website | DocsGPT</title><link>https://krshrimali.github.io/posts/2024/02/building-a-chatbot-from-your-documentation-website-docsgpt/</link><pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2024/02/building-a-chatbot-from-your-documentation-website-docsgpt/</guid><description>&lt;p>Hi everyone! Been a long time, thought I should talk about an ongoing project I&amp;rsquo;m working on.&lt;/p>
&lt;h2 id="introduction---what-are-we-trying-to-do-here">Introduction - What are we trying to do here?&lt;/h2>
&lt;p>Lemme start with some context and disclaimer first:&lt;/p>
&lt;blockquote>
&lt;p>This was a part of an interview process in one of the amazing startups, and I wanted to extend it to an end-to-end project (kinda out of scope from the requirement of that interview process). I won&amp;rsquo;t be naming the startup here to help keep them anonymous and candid for their future candidates.&lt;/p></description></item><item><title>Data Scrapping for ChatBot Model in Rust | DocsGPT | Part-2</title><link>https://krshrimali.github.io/posts/2024/02/data-scrapping-for-chatbot-model-in-rust-docsgpt-part-2/</link><pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2024/02/data-scrapping-for-chatbot-model-in-rust-docsgpt-part-2/</guid><description>&lt;p>Alright everyone, we are back. Just FYI, we&amp;rsquo;ve had a blog on introduction to DocsGPT before: &lt;a href="https://krshrimali.github.io/posts/2024/02/building-a-chatbot-from-your-documentation-website-docsgpt/">https://krshrimali.github.io/posts/2024/02/building-a-chatbot-from-your-documentation-website-docsgpt/&lt;/a>. This is a follow up blog where we&amp;rsquo;ll discuss data scraping and preprocessing to be able to finetune our model for ChatBot use-case.&lt;/p>
&lt;p>Quick recap?&lt;/p>
&lt;ol>
&lt;li>Input is going to be a &lt;em>single link to documentation page (index page)&lt;/em>.&lt;/li>
&lt;li>Need to fetch data for &amp;ldquo;all the internal pages&amp;rdquo;.&lt;/li>
&lt;li>Preprocess (and/or clean) and transform the data to be able to finetune the model.&lt;/li>
&lt;li>Finetune the model and use it for ChatBot use-case.&lt;/li>
&lt;/ol>
&lt;p>In this blog, we&amp;rsquo;ll be covering the first two above, and the rest will be covered in the next blog(s).&lt;/p></description></item><item><title>I started building an app using Rust and here is how it went...</title><link>https://krshrimali.github.io/posts/2022/12/i-started-building-an-app-using-rust-and-here-is-how-it-went.../</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2022/12/i-started-building-an-app-using-rust-and-here-is-how-it-went.../</guid><description>&lt;p>Hi everyone!! I&amp;rsquo;ve an update, on what I&amp;rsquo;ve been up to - and I&amp;rsquo;m excited. It&amp;rsquo;s a &lt;em>rusty&lt;/em> update ðŸ˜‰. As always, I would love to tell you a story (this will help set some context), but if you want to skip and go directly to the update, please scroll to: &lt;code># THE Update&lt;/code> section.&lt;/p>
&lt;h2 id="the-story">The Story&lt;/h2>
&lt;p>I&amp;rsquo;ve been through, possibly, the best and the worst time of my life. I use these contrasting words because everything went wrong - and that&amp;rsquo;s where you get an opportunity to shine. I think I fairly enjoyed resisting the pain and fighting through the odds, hopefully you&amp;rsquo;ll learn about it very soon on my blog (just need the courage to say it out loud :)).&lt;/p></description></item><item><title>Common Collections (Vector and Strings) in Rust [Notes]</title><link>https://krshrimali.github.io/posts/2022/01/common-collections-vector-and-strings-in-rust-notes/</link><pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2022/01/common-collections-vector-and-strings-in-rust-notes/</guid><description>&lt;h2 id="chapter-8-common-collections">Chapter 8: Common Collections&lt;/h2>
&lt;p>These are my notes from the &lt;a href="https://doc.rust-lang.org/book/ch08-00-common-collections.html">chapter-8&lt;/a> of &lt;a href="https://doc.rust-lang.org/book">rust book&lt;/a>. Please scroll down to the bottom (&lt;code>Note&lt;/code>) section if you are curious about what this is.&lt;/p>
&lt;h3 id="81-storing-lists-of-values-with-vectors">8.1: Storing Lists of Values with Vectors&lt;/h3>
&lt;p>&lt;code>Vec&amp;lt;T&amp;gt;&lt;/code> collection type discussed, aka vector:
* By default contiguous.
* All values should be of same type.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Creation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> v: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Vec::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// vec! macro for convenience
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// default integer type is i32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Modifying
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> Vec::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Rust infers the type from the elements pushed here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>v.push(&lt;span style="color:#ae81ff">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v.push(&lt;span style="color:#ae81ff">6&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Dropping
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// a vector is freed, when it goes out of scope
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>} &lt;span style="color:#75715e">// &amp;lt;-- v goes out of scope here, and hence memory is freed as well
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Reading Elements of Vectors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// First way:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> third: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>v[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;The third element is: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, third);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Second way:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">match&lt;/span> v.get(&lt;span style="color:#ae81ff">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Some(num) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;The third element is: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, num),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> None &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;There is no third element.&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.get(&amp;amp;index)&lt;/code> method allows you to handle out of range errors.&lt;/p></description></item><item><title>Common Collections (Vector and Strings) in Rust [Notes]</title><link>https://krshrimali.github.io/posts/2022/01/common-collections-vector-and-strings-in-rust-notes/</link><pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2022/01/common-collections-vector-and-strings-in-rust-notes/</guid><description>&lt;h2 id="chapter-8-common-collections-hash-maps">Chapter 8: Common Collections (Hash Maps)&lt;/h2>
&lt;p>In the &lt;a href="https://krshrimali.github.io/posts/2022/01/common-collections-vector-and-strings-in-rust-notes/">previous blog&lt;/a>, I shared my notes on strings and vectors in Rust, and in this post we&amp;rsquo;ll cover Hash Maps. I personally have found their use in competitive programming, a lot, but hopefully as we move on, we&amp;rsquo;ll see lots of use-cases in real-life problems.&lt;/p>
&lt;h2 id="hash-maps">Hash Maps&lt;/h2>
&lt;p>Hash Maps: &lt;code>HashMap&amp;lt;K, V&amp;gt;&lt;/code>&lt;/p>
&lt;ul>
&lt;li>You can&amp;rsquo;t access using indices, but through keys.&lt;/li>
&lt;li>Hash Maps store data on heap.&lt;/li>
&lt;li>Hash Maps are homogenous (all keys must have same type, and all values must have same type).&lt;/li>
&lt;li>Use &lt;code>std::collections::HashMap&lt;/code> to bring &lt;code>HashMap&lt;/code> to scope.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Creating a New Hash Map&lt;/strong>&lt;/p></description></item></channel></rss>