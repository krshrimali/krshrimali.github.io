<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>contributions on Kushashwa Ravi Shrimali (Kush)</title>
    <link>https://krshrimali.github.io/tags/contributions/</link>
    <description>Recent content in contributions on Kushashwa Ravi Shrimali (Kush)</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 31 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://krshrimali.github.io/tags/contributions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Porting a Tiling Window Manager Extenstion to C&#43;&#43; (Bismuth): Part-2 (getting closest relative window)</title>
      <link>https://krshrimali.github.io/posts/2022/07/porting-a-tiling-window-manager-extenstion-to-c-bismuth-part-2-getting-closest-relative-window/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://krshrimali.github.io/posts/2022/07/porting-a-tiling-window-manager-extenstion-to-c-bismuth-part-2-getting-closest-relative-window/</guid>
      <description>
          
            &lt;h4&gt;Porting a Tiling Window Manager Extenstion to C++ (Bismuth): Part-2 (getting closest relative window)&lt;/h4&gt;
          
          &lt;p&gt;Hi everyone! In this blog, I will be discussing the algorithm used in Bismuth to find the closest relative window to be focused for &lt;code&gt;focusWindowByDirection&lt;/code&gt; event. If you haven&amp;rsquo;t read the previous blog, make sure to give it a read &lt;a href=&#34;https://krshrimali.github.io/posts/2022/07/porting-a-tiling-window-manager-extenstion-to-c-bismuth-part-1/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;recap-from-the-previous-blog&#34;&gt;Recap from the previous blog&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with a quick recap though, in the previous blog, we discussed:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;focusWindowByDirection&lt;/code&gt; requires the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;direction&lt;/code&gt; (from the user) - can be one of: &lt;code&gt;right, left, top/up, bottom/down&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;activeWindow&lt;/code&gt; (from the current session) - this is needed since &lt;code&gt;focusWindowByDirection&lt;/code&gt; event is a &lt;em&gt;relative&lt;/em&gt; event to your current focused window.&lt;/li&gt;
&lt;li&gt;Neighbor window candidates (&lt;code&gt;neighborCandidates&lt;/code&gt;) to your current window (&lt;code&gt;activeWindow&lt;/code&gt;) and the given direction (&lt;code&gt;direction&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// declaration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Window&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;getNeighborCandidates(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; FocusDirection &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;direction, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Window &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;basisWindow);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// use
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Window&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; neighborCandidates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getNeighborCandidates(direction, basisWindow);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;From these neighbor candidates (&lt;code&gt;neighborCandidates&lt;/code&gt;), we will now find the closest relative window corner. To me, it was tricky to understand at first, so we&amp;rsquo;ll be discussing this in detail over in the later sections.&lt;/li&gt;
&lt;li&gt;Once we know the closest relative window corner, we&amp;rsquo;ll try to find the window which satisfies the corner condition.&lt;/li&gt;
&lt;li&gt;If there were multiple found, we&amp;rsquo;ll return the first one based on the time-stamp (last used)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;understanding-the-scenario&#34;&gt;Understanding the scenario&lt;/h2&gt;
&lt;p&gt;I want to start off with a visual, took me some time to draw it, but in case it doesn&amp;rsquo;t look good, I&amp;rsquo;m sorry! My drawing teacher in the high school tried his best, but&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%22https://raw.githubusercontent.com/krshrimali/blog/main/assets/blogs/bismuth-part-2-window-alignment.png%22&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Above image is visual of a tiling window layout where there are in total 5 windows opened (just for imagination, no sane person would open these many windows on a 24 inch monitor&amp;hellip; xD): &lt;code&gt;A, B, C, D, E&lt;/code&gt;, where as mentioned in the figure above, &lt;code&gt;E&lt;/code&gt; is the active window and we are trying to focus &lt;code&gt;UP&lt;/code&gt;. A few notes to take from the figure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;A, B, C, D&lt;/code&gt; windows are of same height and width &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt;. We&amp;rsquo;ll use this information later.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt; window is the active window with width: &lt;code&gt;2 * w&lt;/code&gt; and height: &lt;code&gt;h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We are trying to focus &lt;code&gt;UP&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;getting-closest-relative-window-corner&#34;&gt;Getting Closest Relative Window Corner&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&#34;https://krshrimali.github.io/posts/2022/07/porting-a-tiling-window-manager-extenstion-to-c-bismuth-part-1/&#34;&gt;previous blog&lt;/a&gt;, we had covered &lt;code&gt;getNeighborCandidates&lt;/code&gt;, the output here would be windows: &lt;code&gt;A, B, C, D&lt;/code&gt;. The order will not matter here for understanding, so don&amp;rsquo;t worry about that.&lt;/p&gt;
&lt;p&gt;The next steps in the code include:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; closestRelativeWindowCorner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getClosestRelativeWindowCorner(direction, neighborCandidates);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; closestWindows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getClosestRelativeWindow(direction, neighborCandidates, getClosestRelativeWindow);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;most_recently_used&lt;/span&gt;(closestWindows);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I didn&amp;rsquo;t add comments here, because we&amp;rsquo;ll be going through these 2 magic functions below. Let&amp;rsquo;s start with &lt;code&gt;getClosestRelativeWindowCorner&lt;/code&gt;. The source code for the definition of this function is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;getClosestRelativeWindowCorner(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;direction, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Window&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;neighbors)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;reduce(neighbors.cbegin(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       neighbors.cend(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#75715e&#34;&gt;/* initial value */&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Up &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Left &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; INT_MAX,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       [&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;](&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; prevValue, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Window &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;window) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (direction) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Up:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;max(window.geometry().bottom(), prevValue);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Down:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;min(window.geometry().y(), prevValue);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Left:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;max(window.geometry().right(), prevValue);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Right:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;min(window.geometry().x(), prevValue);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Don&amp;rsquo;t worry about the code if it confuses you, keep in mind that we have the direction as &lt;code&gt;Engine::FocusDirection::Up&lt;/code&gt;, and &lt;code&gt;neighbors&lt;/code&gt; as &lt;code&gt;{A, B, C, D}&lt;/code&gt;. This function gets you the closest window corner relative to the active window or the basis window. How would you do that? Well, it will depend on the direction.&lt;/p&gt;
&lt;p&gt;If the direction is &lt;code&gt;Up&lt;/code&gt; or &lt;code&gt;Down&lt;/code&gt; &amp;ndash;&amp;gt; you should compare the &lt;code&gt;y&lt;/code&gt; coordinate.
If the direction is &lt;code&gt;Left&lt;/code&gt; or &lt;code&gt;Right&lt;/code&gt; &amp;ndash;&amp;gt; you should compare the &lt;code&gt;x&lt;/code&gt; coordinate.&lt;/p&gt;
&lt;p&gt;Now remember the mathematics lectures you had way back in the high school, if you wanna focus up, which vertex do you really care about? Keep your focus on the window C and E for once, the comparison should definitely be with the bottom right&amp;rsquo;s y coordinate, right? That&amp;rsquo;s what we do here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Up: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;max(window.geometry().bottom(), prevValue);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A quick look at &lt;code&gt;bottom()&lt;/code&gt; source code in &lt;code&gt;qrect.h&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Q_DECL_CONSTEXPR &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; QRect&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;bottom() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;noexcept&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; y2; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;y2&lt;/code&gt; is the bottom right&amp;rsquo;s y coordinate. Since we are going up, and anything above the basis window should have &lt;code&gt;y&lt;/code&gt; value &amp;lt; basis window&amp;rsquo;s &lt;code&gt;y&lt;/code&gt; value. (The top left of any screen is considered to be &lt;code&gt;(0, 0)&lt;/code&gt; in this blog). Hence we set the initial value as &lt;code&gt;0&lt;/code&gt;. If we had to go down, we&amp;rsquo;ll set it to &lt;code&gt;INT_MAX&lt;/code&gt; as for anything below the basis window, we&amp;rsquo;ll use &lt;code&gt;std::min&lt;/code&gt; and hence &lt;code&gt;INT_MAX&lt;/code&gt; will fade away with each neighbor window.&lt;/p&gt;
&lt;p&gt;Anyways, enough of theory, so what will be the output of this function for our scenario? Well, this function will give us &lt;code&gt;y_C + h&lt;/code&gt; (which is equal to &lt;code&gt;y_D + h&lt;/code&gt;, so any of them is fine). Now, we&amp;rsquo;ll go ahead to the next function.&lt;/p&gt;
&lt;h2 id=&#34;getting-closest-relative-window&#34;&gt;Getting Closest Relative Window&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Window&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; getClosestRelativeWindow(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;direction, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Window&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;windowArray, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;closestPoint)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Window&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;copy_if(windowArray.cbegin(), windowArray.cend(), result.begin(), [&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;](&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Window &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;window) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (direction) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Up:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; window.geometry().bottom() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; closestPoint &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Down:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; window.geometry().y() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; closestPoint &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Left:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; window.geometry().right() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; closestPoint &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Right:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; window.geometry().x() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; closestPoint &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, remember, we have &lt;code&gt;direction&lt;/code&gt; as &lt;code&gt;Engine::FocusDirection::Up&lt;/code&gt;, &lt;code&gt;windowArray&lt;/code&gt; as &lt;code&gt;{A, B, C, D}&lt;/code&gt;, and &lt;code&gt;closestPoint&lt;/code&gt; as &lt;code&gt;y_C + h&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;This function only exists to give you &lt;em&gt;all the windows&lt;/em&gt; which are &lt;em&gt;close enough&lt;/em&gt; to the &lt;code&gt;closestPoint&lt;/code&gt;. The output out of this function will be windows &lt;code&gt;C, D&lt;/code&gt; (reminder: &lt;code&gt;E&lt;/code&gt; is the basis or active window).&lt;/p&gt;
&lt;p&gt;Some will wonder why do we have two functions: &lt;code&gt;getClosestRelativeWindowCorner&lt;/code&gt;, and &lt;code&gt;getClosestRelativeWindow&lt;/code&gt;? And why this &lt;code&gt;-5, +5&lt;/code&gt;? Unfortunately, it&amp;rsquo;s possible that some windows aren&amp;rsquo;t tiled properly, see &lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/issues/102&#34;&gt;this&lt;/a&gt; issue. I&amp;rsquo;ve attached the screenshot: (credits to the author)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%22https://raw.githubusercontent.com/krshrimali/blog/main/assets/blogs/bismuth-part-2-not-sized-properly.png%22&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hence we can&amp;rsquo;t be too strict here. I personally believe this number &lt;code&gt;+/- 5&lt;/code&gt; should be tinkered better and not hard-coded, but that&amp;rsquo;s for later.&lt;/p&gt;
&lt;p&gt;So from &lt;code&gt;A, B, C, D&lt;/code&gt; being the &lt;em&gt;neighbor candidates&lt;/em&gt;, we have &lt;code&gt;C, D&lt;/code&gt; as the final &lt;em&gt;closest windows&lt;/em&gt; to the basis window (&lt;code&gt;E&lt;/code&gt;). Now which one to choose? That&amp;rsquo;s where we&amp;rsquo;ll have to store the timestamps for each window. And this timestamp should record the last time it was used or accessed. We just get the most recently used out of these windows, and I&amp;rsquo;ll be discussing in the future blogs. I think we discussed a lot today. So that should be it&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;acknowledgement&#34;&gt;Acknowledgement&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t want to shy away from thanking the main maintainer of Bismuth, &lt;a href=&#34;https://github.com/gikari&#34;&gt;gikari&lt;/a&gt; who has worked pro-actively on Bismuth. Of course, the credits should also go to &lt;a href=&#34;https://github.com/esjeon/krohnkite&#34;&gt;krohnkite&lt;/a&gt; for the hard work they put in.&lt;/p&gt;
&lt;p&gt;In case anyone has a feedback or suggestion, please leave a comment on this blog. I wish everyone good health and success. Thanks for reading &amp;lt;3&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Porting a Tiling Window Manager Extenstion to C&#43;&#43; (Bismuth): Part-1</title>
      <link>https://krshrimali.github.io/posts/2022/07/porting-a-tiling-window-manager-extenstion-to-c-bismuth-part-1/</link>
      <pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://krshrimali.github.io/posts/2022/07/porting-a-tiling-window-manager-extenstion-to-c-bismuth-part-1/</guid>
      <description>
          
            &lt;h4&gt;Porting a Tiling Window Manager Extenstion to C++ (Bismuth): Part-1&lt;/h4&gt;
          
          &lt;p&gt;Hi everyone! I understand it&amp;rsquo;s been a long time, and I&amp;rsquo;m so excited to be writing this blog today. In today&amp;rsquo;s blog, I wanted to talk about my journey (so far) on contributing to &lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/&#34;&gt;Bismuth (a KDE&amp;rsquo;s Tiling Window Manager Extension)&lt;/a&gt;, mainly how and why I started, and where I am right now.&lt;/p&gt;
&lt;h2 id=&#34;the-story-why-kde-plasma-and-why-bismuth&#34;&gt;The Story: Why KDE Plasma and Why Bismuth?&lt;/h2&gt;
&lt;p&gt;For the last few months (close to a year), I&amp;rsquo;ve been using Pop OS (a linux distribution by System 76) which had this amazing automatic tiling window extension called &lt;a href=&#34;https://github.com/pop-os/shell&#34;&gt;&lt;code&gt;pop-shell&lt;/code&gt;&lt;/a&gt;, and it was close to what I always needed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tiling.&lt;/li&gt;
&lt;li&gt;A desktop environment.&lt;/li&gt;
&lt;li&gt;Ability to configure keyboard shortcuts.&lt;/li&gt;
&lt;li&gt;Ability to turn-off tiling to floating.&lt;/li&gt;
&lt;li&gt;An option to launch specific windows as floating windows. (example: Steam)&lt;/li&gt;
&lt;li&gt;An active community to seek help or suggestions from.&lt;/li&gt;
&lt;li&gt;Open-Sourced!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now some would say that there is a possibility to install tiling window managers on desktop environments (I&amp;rsquo;m aware &lt;a href=&#34;https://github.com/heckelson/i3-and-kde-plasma&#34;&gt;i3 on KDE Plasma&lt;/a&gt;), but that just felt&amp;hellip; &lt;em&gt;odd&lt;/em&gt; for some reason. So I stuck with Pop OS, until &lt;a href=&#34;https://github.com/pop-os/shell/issues/1470&#34;&gt;this happened&lt;/a&gt;, oh and also &lt;a href=&#34;https://github.com/pop-os/pop/issues/2444&#34;&gt;this&lt;/a&gt;. The second issue where there was a lag while dragging windows, was unfortunately not a Pop OS bug but was mostly related to upstream (mutter if I&amp;rsquo;m not wrong). And when they say that it only happened with NVIDIA drivers, I knew that it&amp;rsquo;s something that will probably take some time to resolve (I would rather prefer not to get into the details here).&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s when I decided to explore KDE Plasma. KDE Plasma 5.25 was just announced, and oh man - it seemed to have impressed a lot of people out there. However, what impressed me the most was that it had no such issues with NVIDIA drivers, at least no lag while dragging windows. I also liked their zoom accessibility feature, much much much better than what GNOME had. Needless to say, that I had decided to stick to KDE Plasma after that.&lt;/p&gt;
&lt;p&gt;Just to give some context, I use multiple monitors and while people happily survive without a tiling window manager, I was the opposite - I felt the need of tiling, specially when I started streaming or sharing my work with others. And then I saw &lt;a href=&#34;https://www.youtube.com/watch?v=TQzaDrmsE9A&#34;&gt;this video: &amp;ldquo;TILING comes to KDE Kwin? ;)&amp;rdquo;&lt;/a&gt;! I was wow-ed (is that a word BTW?). I was introduced to this amazing KDE Tiling Window Manager Extension named &lt;strong&gt;Bismuth&lt;/strong&gt; (&lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/)&#34;&gt;https://github.com/Bismuth-Forge/bismuth/)&lt;/a&gt;. I didn&amp;rsquo;t waste any time in installing and setting up the extension on my machine&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;the-motivation-why-contribute&#34;&gt;The Motivation: Why contribute?&lt;/h2&gt;
&lt;p&gt;Of course, with great power comes great responsibility, and in the Linux ecosystem, &lt;em&gt;with more users, comes more bugs&lt;/em&gt;. The same happened with Bismuth, lots of users started trying it, and it had good amount of issues, interestingly, less were bugs and more were about features. However, I got stuck with one of the most important feature I needed, and it was &amp;ldquo;Move window to the next/previous screen/monitor&amp;rdquo; with a keyboard-shortcut. Now, do note that Bismuth did promise that it comes with the feature, so it was a bug. And as any other user would do, I thought of raising an issue but there was one already: &lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/issues/370&#34;&gt;here&lt;/a&gt;. I regularly move my windows from one screen to another with keyboard shortcuts, and with this bug, I started facing issues. But as they say, in open-source, the community is everything. A guy with username: &lt;a href=&#34;https://github.com/benemorius&#34;&gt;benemorius&lt;/a&gt; came up with a solution, and even though it took me some time to get it working, but it was eventually fixed. I started realizing how much I love this process, but more than that - I wanted to dive into the source code, and understand how it works. That was the time I realized I will look at the issues, found many opened, but since the maintainer of the library had a goal of porting it from typescript to C++, which meant that new features were essentially blocked till then (unless and until they are small with respect to the number of lines of code).&lt;/p&gt;
&lt;p&gt;That was the time I realized that I should stop complaining, and instead start helping. I found an opened issue &lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/issues/335#issuecomment-1159362257&#34;&gt;here&lt;/a&gt; and left a comment. The maintainer was very kind to respond, and guide through the process. And that&amp;rsquo;s where I started contributing to Bismuth.&lt;/p&gt;
&lt;p&gt;To a lot of people, and even to me, porting looks like an onboarding task, you have got things baked in for yourself, all you have to do is port it to another language. This was different though, I realized that I might have to write my own code at some places (&lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/issues/335#issuecomment-1159993392)&#34;&gt;https://github.com/Bismuth-Forge/bismuth/issues/335#issuecomment-1159993392)&lt;/a&gt;, it was a re-write from ground up.&lt;/p&gt;
&lt;p&gt;One thing I missed writing so far, was how much I loved developing tools and libraries. It&amp;rsquo;s something that comes naturally to me, and Bismuth seemed to be an amazing place to continue my passion.&lt;/p&gt;
&lt;h2 id=&#34;contributions&#34;&gt;Contributions&lt;/h2&gt;
&lt;p&gt;For those who might be unaware, I did all my contributions (so far) live on my Twitch channel: &lt;a href=&#34;https://twitch.tv/buffetcodes&#34;&gt;buffetcodes&lt;/a&gt;, and have uploaded all the recordings on my &lt;a href=&#34;https://youtube.com/c/kushashwaraviShrimali&#34;&gt;YouTube channel&lt;/a&gt;. There is a &lt;a href=&#34;https://www.youtube.com/playlist?list=PLfjzHJeA53gTMjuPI1YaQ9jjZx_E8mqJZ&#34;&gt;playlist if you are interested&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Honestly speaking, I had no clue when I started that how the journey will be, how easy/difficult it will be! To me, it was just fun. I don&amp;rsquo;t know if it was easy, or if it was difficult, it was just something very fun to do! Plus, came with a lot of learning. So far, when I&amp;rsquo;m writing this blog, I&amp;rsquo;ve 2 opened PRs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/pull/387&#34;&gt;C++ Port: &lt;code&gt;focusWindowByDirection&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/pull/393&#34;&gt;C++ Port: &lt;code&gt;ThreeColumn&lt;/code&gt; layout&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To give you a glimpse, here is how the code looks when you do press a keyboard shortcut to focus window to your left/right/up/down:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;focusWindowByDirection(FocusDirection direction)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; windowsToChoseFrom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m_windows.visibleWindowsOn(activeSurface());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (windowsToChoseFrom.empty()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// If there is no current window, select the first one.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; activeWindow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m_windows.activeWindow();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;activeWindow.has_value()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        activeWindow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; windowsToChoseFrom.front();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; windowNeighbor(direction, activeWindow.value());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (window.has_value()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        window&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;activate();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s consider that you are trying to focus right from your current window, so the parameter &lt;code&gt;direction&lt;/code&gt; will have a value of &lt;code&gt;FocusDirection::Right&lt;/code&gt; (it&amp;rsquo;s an &lt;code&gt;enum&lt;/code&gt;). The current state of Bismuth only allowed you to move right/left/top/bottom on the current screen, that means if you want to move to the next monitor - you can&amp;rsquo;t use the same keyboard shortcuts. Hence the first line in the body of the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This gets all the visible windows (not hidden) on the active screen/montior/surface
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; windowsToChoseFrom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m_windows.visible(activeSurface());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now of-course there is a possibility that you have no windows visible on the surface, in that case it will just return (which is what the next 3 lines do):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Early return if no window is visible on the current surface
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (windowsToChoseFrom.empty()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, now comes the serious part. Whenever you think of &lt;code&gt;focusWindowByDirection&lt;/code&gt;, there are 2 possibilities (apart from those listed above):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have an active window, that means your mouse is already focused on a window on the current screen.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t have an active window, that means your focus can be on the panel, or maybe on an icon or wherever except a window on the current surface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These two cases need to be handled, and that&amp;rsquo;s what the next few lines do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If there is no current window, select the first one.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; activeWindow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m_windows.activeWindow();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;activeWindow.has_value()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    activeWindow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; windowsToChoseFrom.front();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the extension knows what &lt;code&gt;activeWindow&lt;/code&gt; is, it&amp;rsquo;s comparatively easier to figure out which window to focus on (only if it&amp;rsquo;s possible). Time to talk about the function that does the magic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* This function returns the closest window (if any) from the current window for the given direction */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Window&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;windowNeighbor(Engine&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;FocusDirection direction, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Window &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;basisWindow);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above is the declaration of the function, and hopefully the comment describes it well. You will definitely need to know the window relative to which you&amp;rsquo;ll return the output window, and the direction is a must. Note the return type, &lt;code&gt;std::optional&amp;lt;Window&amp;gt;&lt;/code&gt;. As I said, it is possible that there is a window to the right, it&amp;rsquo;s also possible that there are no more windows to the right direction. Hence &lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/optional&#34;&gt;&lt;code&gt;std::optional&lt;/code&gt;&lt;/a&gt; there.&lt;/p&gt;
&lt;p&gt;Let me quickly talk about the algorithm that Bismuth follows for this feature:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get all possible candidates in the neighborhood of the active window &lt;em&gt;for the given direction&lt;/em&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If the direction is right, you need to know how many &lt;em&gt;tiled&lt;/em&gt; windows are on the right to the active window.&lt;/li&gt;
&lt;li&gt;These neighbor candidates can also be on the top-right if the given direction is right.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Get the &lt;em&gt;closest&lt;/em&gt; relative window from the candidates selected in the step-1.&lt;/li&gt;
&lt;li&gt;If there are multiple windows from step-2, return the window which was used recently (this means that we need each window to have &amp;ldquo;the time it was last used&amp;rdquo; as a meta-data).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ll be diving deep into the code for each of these steps in my next blog.&lt;/p&gt;
&lt;p&gt;Do note that I&amp;rsquo;m not doing this full-time, so this will obviously look slow to a lot of people, but I see a motivation behind doing this. I also believe that it is worth to mention &lt;a href=&#34;https://github.com/benemorius/bismuth/&#34;&gt;benemorius&amp;rsquo;s work&lt;/a&gt; on Bismuth, where has fixed a lot of the issues + added new features to Bismuth, and that is amazing! Shoutout to him on what he has been doing for the community.&lt;/p&gt;
&lt;p&gt;Thank you for reading this blog, and if you are interested, feel free to check out &lt;a href=&#34;https://github.com/Bismuth-Forge/bismuth/&#34;&gt;Bismuth&lt;/a&gt;. 😄❤️&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
