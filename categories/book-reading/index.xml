<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Book Reading on Kushashwa Ravi Shrimali (Kush)</title><link>https://krshrimali.github.io/categories/book-reading/</link><description>Recent content in Book Reading on Kushashwa Ravi Shrimali (Kush)</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 26 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://krshrimali.github.io/categories/book-reading/index.xml" rel="self" type="application/rss+xml"/><item><title>Prefer const_iterators to iterators (Notes)</title><link>https://krshrimali.github.io/posts/2021/09/prefer-const_iterators-to-iterators-notes/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2021/09/prefer-const_iterators-to-iterators-notes/</guid><description>&lt;hr>
&lt;p>&lt;strong>NOTE&lt;/strong>&lt;/p>
&lt;p>My notes on Chapter 3, Item 13 of Effective Modern C++ written by Scott Meyers.&lt;/p>
&lt;p>Some (or even all) of the text can be similar to what you see in the book, as these are notes: I&amp;rsquo;ve tried not to be unnecessarily creative with my words. :)&lt;/p>
&lt;hr>
&lt;p>&lt;img loading="lazy" src="https://raw.githubusercontent.com/krshrimali/blog/main/assets/cover-images/prefer-const-iterators-to-iterators.png">&lt;/p>
&lt;p>In C++, iterators come handy to point at memory addresses of STL containers. For example,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// C++11
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> x {&lt;span style="color:#ae81ff">11&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">23&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// begin() member function returns an iterator, which points to the first
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// memory address of the container x
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;::&lt;/span>iterator it &lt;span style="color:#f92672">=&lt;/span> x.begin();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>While the general practice is to use &lt;code>const&lt;/code> whenever possible, but programmers tend to use whenever it&amp;rsquo;s &lt;em>practical&lt;/em>. &lt;code>const_iterators&lt;/code> is particularly suggested when you want to use iterators, but you don&amp;rsquo;t need to modify what it points to.&lt;/p></description></item><item><title>Declaring Overriding Functions override (Notes)</title><link>https://krshrimali.github.io/posts/2021/09/declaring-overriding-functions-override-notes/</link><pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2021/09/declaring-overriding-functions-override-notes/</guid><description>&lt;hr>
&lt;p>&lt;strong>NOTE&lt;/strong>&lt;/p>
&lt;p>My notes on Chapter 3, Item 12 of Effective Modern C++ written by Scott Meyers.&lt;/p>
&lt;p>Some (or even all) of the text can be similar to what you see in the book, as these are notes: I&amp;rsquo;ve tried not to be unnecessarily creative with my words. :)&lt;/p>
&lt;hr>
&lt;p>&lt;img loading="lazy" src="https://raw.githubusercontent.com/krshrimali/blog/main/assets/cover-images/declaring-overriding-functions-override.png">&lt;/p>
&lt;p>Overriding != Overloading&lt;/p>
&lt;p>&lt;em>Example&lt;/em> of virtual function overriding:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Base class
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> doWork();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Derived class from Base
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Derived&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Base {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// virtual is optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// this will &amp;#34;override&amp;#34; Base::doWork
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> doWork();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// This creates a &amp;#34;Base&amp;#34; class pointer to &amp;#34;Derived&amp;#34; class object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Base&lt;span style="color:#f92672">&amp;gt;&lt;/span> upb &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>Derived&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Derived doWork() function is invoked
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>upb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>doWork();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is how virtual function overriding allows to invoke a &amp;ldquo;derived class function&amp;rdquo; from a base class interface.&lt;/p></description></item><item><title>Prefer Deleted Functions to Private Undefined Ones (Notes)</title><link>https://krshrimali.github.io/posts/2021/08/prefer-deleted-functions-to-private-undefined-ones-notes/</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2021/08/prefer-deleted-functions-to-private-undefined-ones-notes/</guid><description>&lt;h2 id="prefer-deleted-functions-to-private-undefined-ones">Prefer deleted functions to private undefined ones&lt;/h2>
&lt;p>This item (11) in the chapter 3 focuses on:&lt;/p>
&lt;ul>
&lt;li>Why and How to prevent users calling particular functions?&lt;/li>
&lt;li>C++-98 and C++-11 approach&lt;/li>
&lt;li>What&amp;rsquo;s the difference between deleting a function vs declaring a member function private (and not defining them)?&lt;/li>
&lt;/ul>
&lt;p>&lt;img loading="lazy" src="https://raw.githubusercontent.com/krshrimali/blog/main/assets/cover-images/Item-11-Notes.png">&lt;/p>
&lt;hr>
&lt;p>&lt;strong>NOTE&lt;/strong>&lt;/p>
&lt;p>These are my notes on Chapter 3, Item 11 of Effective Modern C++ written by Scott Meyers.&lt;/p>
&lt;p>Some (or even all) of the text can be similar to what you see in the book, as these are notes: I&amp;rsquo;ve tried not to be unnecessarily creative with my words. :)&lt;/p></description></item><item><title>Prefer Scoped Enums over Unscoped Enums (Notes)</title><link>https://krshrimali.github.io/posts/2021/08/prefer-scoped-enums-over-unscoped-enums-notes/</link><pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2021/08/prefer-scoped-enums-over-unscoped-enums-notes/</guid><description>&lt;h2 id="scoped-vs-unscoped-enums">Scoped vs Unscoped Enums&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>General rule:&lt;/strong> declaring a name inside curly braces is limited to that scope.&lt;/li>
&lt;li>&lt;strong>Exception:&lt;/strong> C++-98 style Enums&lt;/li>
&lt;/ul>
&lt;p>&lt;img loading="lazy" src="https://raw.githubusercontent.com/krshrimali/blog/main/assets/cover-images/Unscoped-Scoped-Enums.png">&lt;/p>
&lt;hr>
&lt;p>&lt;strong>NOTE&lt;/strong>&lt;/p>
&lt;p>My notes on Chapter 3, Item 10 of Effective Modern C++ written by Scott Meyers.&lt;/p>
&lt;p>Some (or even all) of the text can be similar to what you see in the book, as these are notes: I&amp;rsquo;ve tried not to be unnecessarily creative with my words. :)&lt;/p></description></item><item><title>Prefer Alias Declarations to Typedefs (Notes)</title><link>https://krshrimali.github.io/posts/2021/08/prefer-alias-declarations-to-typedefs-notes/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://krshrimali.github.io/posts/2021/08/prefer-alias-declarations-to-typedefs-notes/</guid><description>&lt;p>One solution to avoiding using long type names:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// So C++98 like
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">typedef&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>unordered_map&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string, std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> UPtrMapSS;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>